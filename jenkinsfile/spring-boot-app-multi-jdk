#!/usr/bin/env groovy
// WIP
pipeline {

    agent { label 'docker' }

    options {
        timestamps()
        disableConcurrentBuilds()
        skipStagesAfterUnstable()
        parallelsAlwaysFailFast()
        timeout(time: 45, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    environment {
        MAVEN_OPTS="-Duser.home=${USER_HOME} -Xmx256m"
    }

    stages {
        stage('DESCRIPTION') {
            steps {
                echo("""
                Sample of spring boot application :

                Requirements :
                * Run the vagrant jenkins-slave instance :
                  * Start the server instance : `vagrant up jenkins-slave --no-provision`
                  * Provision the running instance : `vagrant provision jenkins-slave`
                * Create a new credentials : http://vcap.me:8090/credentials/store/system/domain/_/newCredentials
                  * Kind : SSH Username with private key
                  * ID : 'vagrant-id'
                  * Description : 'vagrant-id'
                  * Username : 'vagrant'
                  * Private key : https://raw.githubusercontent.com/SoatGroup/jenkinsfile-usage-demo/master/vagrant-images/data/server/demo-soat
                * Create a node : http://vcap.me:8090/computer/new
                  * Node name : 'jenkins-slave'
                  * #2 of executors : 2
                  * Remote root directory : /home/vagrant
                  * Labels : 'vagrant docker'
                  * Launch method : 'Launch agent agents via SSH'
                    * Host : '192.168.10.30'
                    * Credentials : 'vagrant-id'
                    * Host Key Verification Strategy : 'Non verifying Verification Strategy'
                  * Check the `Environment variables`
                    * Add a variable : `USER_HOME` = `/home/vagrant`

                Pipeline description :
                * CHECKOUT : Checkout the correct branch
                * COMPILE : Compile application
                * TESTS : Launch tests
                """)
            }
        }

        stage('COMPILE') {
            agent {
                docker {
                    image 'openjdk:11-jdk-slim'
                    args "-v ${USER_HOME}/.m2:${USER_HOME}/.m2"
                    reuseNode true
                }
            }
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            steps {
                with()
                sh("cd sample-spring-boot-app && ./mvnw --batch-mode compile")
            }
        }
        
        stage('TESTS') {
            options {
                timeout(time: 20, unit: 'MINUTES')
            }
            parallel {
                stage('TESTS : JAVA 11') {
                    agent {
                        docker {
                            image 'openjdk:11-jdk-slim'
                            args "-v ${USER_HOME}/.m2:${USER_HOME}/.m2"
                        }
                    }
                    steps {
                        unstash('sample-spring-boot-app')
                        sh("cd sample-spring-boot-app && ./mvnw --batch-mode test")
                    }
                    post {
                        always {
                            junit "sample-spring-boot-app/**/TEST-*.xml"
                        }
                    }
                }
                stage('TESTS : JAVA 8') {
                    agent {
                        docker {
                            image 'openjdk:8-jdk-slim'
                            args "-v ${USER_HOME}/.m2:${USER_HOME}/.m2"
                        }
                    }
                    steps {
                        unstash('sample-spring-boot-app')
                        sh("cd sample-spring-boot-app && ./mvnw --batch-mode test")
                    }
                    post {
                        always {
                            junit "sample-spring-boot-app/**/TEST-*.xml"
                        }
                    }
                }
            }
        }

    }

    post {
        always {
            cleanWs()
        }
        failure {
            echo ("Something was wrong !!\nShould send email or a slack notif instead !")
        }
    }

}
