#!/usr/bin/env groovy
pipeline {

    agent any

    options {
        disableConcurrentBuilds()
        timeout(time: 10, unit: 'MINUTES')
    }

    stages {
        stage('DESCRIPTION') {
            steps {
                echo("""
                This demo is made for SSH Testing :
                
                Requirements :
                * Run the vagrant server instance :
                  * Start the server instance : `vagrant up server --no-provision`
                  * Provision the running instance : `vagrant provision server`
                * Create credentials : ${JENKINS_URL}credentials/store/system/domain/_/newCredentials :
                  * Kind : SSH Username with private key
                  * ID : 'jenkins-ssh-id'
                  * Description : 'jenkins-ssh-id'
                  * Username : 'vagrant'
                  * Private key : https://raw.githubusercontent.com/SoatGroup/jenkinsfile-usage-demo/master/vagrant-images/data/server/demo-soat
                * The SSH-Agent plugin should be installed : https://plugins.jenkins.io/ssh-agent 
                
                Pipeline description :
                * SSH : Retrieve the ssh private key & launch a command on the remote host

                Documentation :
                * Credentials documentation : https://jenkins.io/doc/pipeline/steps/credentials-binding/
                * Credentials plugin : https://plugins.jenkins.io/credentials-binding
                * Take a look at the SSH Agent Plugin : https://plugins.jenkins.io/ssh-agent
                """)
            }
        }

        stage('SSH') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: "jenkins-ssh-id", keyFileVariable: "SSH_PRIVATE_KEY", usernameVariable: "SSH_USERNAME")]) {
                   sh("""
                   hostname
                   ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ${SSH_USERNAME}@192.168.10.40 'echo "Remote hostname : \$(hostname)"'
                   """)
                }
            }
        }
    }
    
}