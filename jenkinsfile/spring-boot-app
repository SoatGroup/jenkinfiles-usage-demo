  pipeline {

    agent any

    options {
        timestamps()
        disableConcurrentBuilds()
        timeout(time: 22, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {
        stage('CHECKOUT') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*']],
                    doGenerateSubmoduleConfigurations: false,
                    userRemoteConfigs: [[url: 'https://github.com/SoatGroup/jenkinfiles-usage-demo']]
                ])
                stash([name: 'sample-spring-boot-app', includes: '**', ])
            }
        }
        
        stage('COMPILE') {
            agent {
                docker {
                    image 'openjdk:11-jdk-slim'
                    args '-v $HOME/.m2:/root/.m2'
                    reuseNode true
                }
            }
            options {
                timeout(time: 2, unit: 'MINUTES')
            }
            steps {
                sh("cd sample-spring-boot-app && ./mvnw compile")
            }
        }
        
        stage('TESTS') {
            options {
                timeout(time: 5, unit: 'MINUTES')
            }
            parallel {
                stage('TESTS : JAVA 11') {
                    agent {
                        docker {
                            image 'openjdk:11-jdk-slim'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps {
                        unstash('sample-spring-boot-app')
                        sh("cd sample-spring-boot-app && ./mvnw test")
                    }
                    post {
                        always {
                            junit "sample-spring-boot-app/**/TEST-*.xml"
                        }
                    }
                }
                stage('TESTS : JAVA 8') {
                    agent {
                        docker {
                            image 'openjdk:8-jdk-slim'
                            args '-v $HOME/.m2:/root/.m2'
                        }
                    }
                    steps {
                        unstash('sample-spring-boot-app')
                        sh("cd sample-spring-boot-app && ./mvnw test")
                    }
                    post {
                        always {
                            junit "sample-spring-boot-app/**/TEST-*.xml"
                        }
                    }
                }
            }
        }

        stage('RELEASE') {
            when {
                branch 'master'
            }
            agent {
                docker {
                    image 'openjdk:11-jdk-slim'
                    args '-v $HOME/.m2:/root/.m2'
                    reuseNode true
                }
            }
            options {
                timeout(time: 10, unit: 'MINUTES')
            }
            steps {
                sh("./mvnw --batch-mode release:prepare release:perform")
            }
            post {
                success {
                    echo ("Success !!\nShould send email or a slack notif instead !")
                }
            }
        }

    }

    post {
        failure {
            echo ("Failure !!\nShould send email or a slack notif instead !")
        }
    }

}
